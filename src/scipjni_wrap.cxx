/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


   #include "scip/scip.h"
   #include "scip/scipdefplugins.h"

   /* assist function to create a SCIP */
   SCIP* createSCIP()
   {
      SCIP* scip;

      SCIP_CALL_ABORT( SCIPcreate(&scip) );

      return scip;
   }

   /* assist function to free a SCIP */
   void freeSCIP(SCIP* scip)
   {
      SCIP_CALL_ABORT( SCIPfree(&scip) );
   }

   /* assist function to create a variable */
   SCIP_VAR* createVar(SCIP* scip, const char* name, SCIP_Real lb, SCIP_Real ub, SCIP_Real obj, SCIP_VARTYPE vartype)
   {
      SCIP_VAR* var;

      SCIP_CALL_ABORT( SCIPcreateVarBasic(scip, &var, name, lb, ub, obj, vartype) );
      return var;
   }

   /* assist function to free a variable */
   void releaseVar(SCIP* scip, SCIP_VAR* var)
   {
      SCIP_CALL_ABORT( SCIPreleaseVar(scip, &var) );
   }

   /* assist function to create a linear constraint */
   SCIP_CONS* createConsBasicLinear(SCIP* scip, const char* name , int nvars, SCIP_VAR** vars, SCIP_Real* vals, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicLinear(scip, &cons, name, nvars, vars, vals, lhs, rhs) );

      return cons;
   }

   /* assist function to create a quadratic constraint */
   SCIP_CONS* createConsBasicQuadratic(SCIP* scip, const char* name, int nlinvars, SCIP_VAR** linvars, SCIP_Real* lincoefs,\
      int nquadvars, SCIP_VAR** quadvars1, SCIP_VAR** quadvars2, SCIP_Real* quadcoefs, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicQuadratic(scip, &cons, name, nlinvars, linvars, lincoefs, nquadvars, quadvars1, quadvars2, quadcoefs, lhs, rhs) );

      return cons;
   }

   /* assist function to create a super indicator constraint */
   SCIP_CONS* createConsBasicSuperIndicator(SCIP *scip, const char *name, SCIP_VAR *binvar, SCIP_CONS *slackcons)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSuperindicator(scip, &cons, name, binvar, slackcons) );

      return cons;
   }

   /* assist function to release a constraint */
   void releaseCons(SCIP* scip, SCIP_CONS* cons)
   {
      SCIP_CALL_ABORT( SCIPreleaseCons(scip, &cons) );
   }


static double *new_double_array(int nelements) { 
  return new double[nelements](); 
}

static void delete_double_array(double *ary) { 
  delete [] ary; 
}

static double double_array_getitem(double *ary, int index) {
    return ary[index];
}
static void double_array_setitem(double *ary, int index, double value) {
    ary[index] = value;
}


static unsigned int *new_unsigned_int_array(int nelements) { 
  return new unsigned int[nelements](); 
}

static void delete_unsigned_int_array(unsigned int *ary) { 
  delete [] ary; 
}

static unsigned int unsigned_int_array_getitem(unsigned int *ary, int index) {
    return ary[index];
}
static void unsigned_int_array_setitem(unsigned int *ary, int index, unsigned int value) {
    ary[index] = value;
}


static SCIP_VAR* *new_SCIP_VAR_array(int nelements) { 
  return new SCIP_VAR*[nelements](); 
}

static void delete_SCIP_VAR_array(SCIP_VAR* *ary) { 
  delete [] ary; 
}

static SCIP_VAR* SCIP_VAR_array_getitem(SCIP_VAR* *ary, int index) {
    return ary[index];
}
static void SCIP_VAR_array_setitem(SCIP_VAR* *ary, int index, SCIP_VAR* value) {
    ary[index] = value;
}


static SCIP_SOL* *new_SCIP_SOL_array(int nelements) { 
  return new SCIP_SOL*[nelements](); 
}

static void delete_SCIP_SOL_array(SCIP_SOL* *ary) { 
  delete [] ary; 
}

static SCIP_SOL* SCIP_SOL_array_getitem(SCIP_SOL* *ary, int index) {
    return ary[index];
}
static void SCIP_SOL_array_setitem(SCIP_SOL* *ary, int index, SCIP_SOL* value) {
    ary[index] = value;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "scipjni_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1double_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double *)new_double_array(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1double_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  delete_double_array(arg1);
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_double_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)double_array_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_double_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  double_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1unsigned_1int_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned int *)new_unsigned_int_array(arg1);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1unsigned_1int_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  delete_unsigned_int_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_unsigned_1int_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)unsigned_int_array_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_unsigned_1int_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  unsigned_int_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1VAR_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_VAR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_VAR **)new_SCIP_VAR_array(arg1);
  *(SCIP_VAR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1VAR_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_VAR **arg1 = (SCIP_VAR **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ***)&jarg1; 
  delete_SCIP_VAR_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VAR_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_VAR **arg1 = (SCIP_VAR **) 0 ;
  int arg2 ;
  SCIP_VAR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_VAR *)SCIP_VAR_array_getitem(arg1,arg2);
  *(SCIP_VAR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VAR_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_VAR **arg1 = (SCIP_VAR **) 0 ;
  int arg2 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_VAR **)&jarg3; 
  SCIP_VAR_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1SOL_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_SOL **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_SOL **)new_SCIP_SOL_array(arg1);
  *(SCIP_SOL ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1SOL_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_SOL **arg1 = (SCIP_SOL **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL ***)&jarg1; 
  delete_SCIP_SOL_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1SOL_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_SOL **arg1 = (SCIP_SOL **) 0 ;
  int arg2 ;
  SCIP_SOL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_SOL *)SCIP_SOL_array_getitem(arg1,arg2);
  *(SCIP_SOL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1SOL_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_SOL **arg1 = (SCIP_SOL **) 0 ;
  int arg2 ;
  SCIP_SOL *arg3 = (SCIP_SOL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_SOL **)&jarg3; 
  SCIP_SOL_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1OKAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_OKAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1NOMEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_NOMEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1READERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_READERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1WRITEERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_WRITEERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1NOFILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_NOFILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1FILECREATEERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_FILECREATEERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1LPERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_LPERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1NOPROBLEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_NOPROBLEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1INVALIDCALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_INVALIDCALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1INVALIDDATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_INVALIDDATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1INVALIDRESULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_INVALIDRESULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PLUGINNOTFOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PLUGINNOTFOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMETERUNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PARAMETERUNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMETERWRONGTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PARAMETERWRONGTYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMETERWRONGVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PARAMETERWRONGVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1KEYALREADYEXISTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_KEYALREADYEXISTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1MAXDEPTHLEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_MAXDEPTHLEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1BRANCHERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_BRANCHERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1BINARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_BINARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1INTEGER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_INTEGER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1IMPLINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_IMPLINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1CONTINUOUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_CONTINUOUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1CPSOLVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_CPSOLVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1EASYCIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_EASYCIP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1FEASIBILITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_FEASIBILITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1HARDLP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_HARDLP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1OPTIMALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_OPTIMALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1COUNTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_COUNTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1PHASEFEAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_PHASEFEAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1PHASEIMPROVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_PHASEIMPROVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1PHASEPROOF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_PHASEPROOF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1OBJSENSE_1MAXIMIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Objsense result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Objsense)SCIP_OBJSENSE_MAXIMIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1OBJSENSE_1MINIMIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Objsense result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Objsense)SCIP_OBJSENSE_MINIMIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPcalcMachineEpsilon(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)SCIPcalcMachineEpsilon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP **arg1 = (SCIP **) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP ***)&jarg1; 
  result = (SCIP_RETCODE)SCIPcreate(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetNVars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (int)SCIPgetNVars(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPreadProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (SCIP_RETCODE)SCIPreadProb(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPreadParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (SCIP_RETCODE)SCIPreadParams(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreateProbBasic(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (SCIP_RETCODE)SCIPcreateProbBasic(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPincludeDefaultPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPincludeDefaultPlugins(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPsolve(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolveConcurrent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPsolveConcurrent(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPaddVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  result = (SCIP_RETCODE)SCIPaddVar(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetVars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_VAR **)SCIPgetVars(arg1);
  *(SCIP_VAR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPaddCons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_CONS **)&jarg2; 
  result = (SCIP_RETCODE)SCIPaddCons(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPwriteOrigProblem(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  result = (SCIP_RETCODE)SCIPwriteOrigProblem(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPwriteTransProblem(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  result = (SCIP_RETCODE)SCIPwriteTransProblem(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPprintStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  result = (SCIP_RETCODE)SCIPprintStatistics(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPprintBestSol(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (SCIP_RETCODE)SCIPprintBestSol(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIPsetMessagehdlrQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  SCIPsetMessagehdlrQuiet(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_SOL **)SCIPgetSols(arg1);
  *(SCIP_SOL ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetNSols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (int)SCIPgetNSols(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetBestSol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_SOL *)SCIPgetBestSol(arg1);
  *(SCIP_SOL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSolVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  arg3 = *(SCIP_VAR **)&jarg3; 
  result = (double)SCIPgetSolVal(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSolOrigObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  result = (double)SCIPgetSolOrigObj(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPinfinity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPinfinity(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPepsilon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPepsilon(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPfeastol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPfeastol(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetBoolParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (SCIP_RETCODE)SCIPsetBoolParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetIntParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (SCIP_RETCODE)SCIPsetIntParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetLongintParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  result = (SCIP_RETCODE)SCIPsetLongintParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetRealParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (SCIP_RETCODE)SCIPsetRealParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetCharParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jchar jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  result = (SCIP_RETCODE)SCIPsetCharParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetStringParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (SCIP_RETCODE)SCIPsetStringParam(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetEmphasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_PARAMEMPHASIS arg2 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (SCIP_PARAMEMPHASIS)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (SCIP_RETCODE)SCIPsetEmphasis(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetObjsense(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_OBJSENSE arg2 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (SCIP_OBJSENSE)jarg2; 
  result = (SCIP_RETCODE)SCIPsetObjsense(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetObjsense(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_OBJSENSE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_OBJSENSE)SCIPgetObjsense(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetGap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPgetGap(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPchgVarObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  double arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (SCIP_RETCODE)SCIPchgVarObj(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPchgVarBranchPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (SCIP_RETCODE)SCIPchgVarBranchPriority(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreateSol(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **arg2 = (SCIP_SOL **) 0 ;
  SCIP_HEUR *arg3 = (SCIP_HEUR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL ***)&jarg2; 
  arg3 = *(SCIP_HEUR **)&jarg3; 
  result = (SCIP_RETCODE)SCIPcreateSol(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetSolVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  double arg4 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = (double)jarg4; 
  result = (SCIP_RETCODE)SCIPsetSolVal(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetSolVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (SCIP_RETCODE)SCIPsetSolVals(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPaddSolFree(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **arg2 = (SCIP_SOL **) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL ***)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (SCIP_RETCODE)SCIPaddSolFree(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_BMScheckEmptyMemory(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BMScheckEmptyMemory();
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_BMSgetMemoryUsed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)BMSgetMemoryUsed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (char *)SCIPvarGetName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  SCIP_VARTYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (SCIP_VARTYPE)SCIPvarGetType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetLbLocal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetLbLocal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetUbLocal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetUbLocal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetLbGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetLbGlobal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetUbGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetUbGlobal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetObj(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetBranchPriority(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (int)SCIPvarGetBranchPriority(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolGetDepth(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_SOL *arg1 = (SCIP_SOL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL **)&jarg1; 
  result = (int)SCIPsolGetDepth(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolGetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_SOL *arg1 = (SCIP_SOL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL **)&jarg1; 
  result = (int)SCIPsolGetIndex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jscip_SCIPJNIJNI_SCIPconsGetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  SCIP_CONS *arg1 = (SCIP_CONS *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_CONS **)&jarg1; 
  result = (char *)SCIPconsGetName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createSCIP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SCIP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP *)createSCIP();
  *(SCIP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_freeSCIP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP *arg1 = (SCIP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  freeSCIP(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jint jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  SCIP_VARTYPE arg6 ;
  SCIP_VAR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (SCIP_VARTYPE)jarg6; 
  result = (SCIP_VAR *)createVar(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_VAR **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_releaseVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  releaseVar(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicLinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  double arg6 ;
  double arg7 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (SCIP_CONS *)createConsBasicLinear(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicQuadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jdouble jarg10, jdouble jarg11) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  SCIP_VAR **arg7 = (SCIP_VAR **) 0 ;
  SCIP_VAR **arg8 = (SCIP_VAR **) 0 ;
  double *arg9 = (double *) 0 ;
  double arg10 ;
  double arg11 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(SCIP_VAR ***)&jarg7; 
  arg8 = *(SCIP_VAR ***)&jarg8; 
  arg9 = *(double **)&jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  result = (SCIP_CONS *)createConsBasicQuadratic(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSuperIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  SCIP_CONS *arg4 = (SCIP_CONS *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = *(SCIP_CONS **)&jarg4; 
  result = (SCIP_CONS *)createConsBasicSuperIndicator(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_releaseCons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_CONS **)&jarg2; 
  releaseCons(arg1,arg2);
}


#ifdef __cplusplus
}
#endif

